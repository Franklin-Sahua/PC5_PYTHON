# -*- coding: utf-8 -*-
"""PC5_Problema3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bgbjbhwGBYQcSE-KIMdQUwnA5g8MBHgC

# Problema 3 - Análisis Datos Youtube - Archivo .py

1. Descargar un archivo .zip mediante código del siguiente url (https://netsg.cs.sfu.ca/youtubedata/) (recomiendo descargar el archivo 0333.zip que es menos pesado)
2. Descomprimir los datos en una carpeta que genere y leer mediante pandas alguno de los archivos en esta. (observar que no es necesario en un primer momento leer los datos con un nombre de columna especifico)

    - Los nombres de columna pueden ser puestos posteriormente
    - El separador de columna es <code>\t</code>
    - Se colocan los nombres de columnas y descripción asociada para su intermetación. Ejemplo columna1 sera VideoID ...
    

3. Procesar los datos según:
    - Nos quedaremos con las columnas: VideoID, edad, catgoria, views, rate.
    - Realizar un filtrado básico a los datos. Ejemplo solo seleccionar cierto grupo de categorias

4. Procesamiento en Mongo Db
    - Exportar los datos a mongo DB
    - Compartir link donde encontrar los datos

| Nombre de la Columna | Descripción                                                                                                 |
|----------------------|-------------------------------------------------------------------------------------------------------------|
| `video ID`           | Una cadena de 11 dígitos, la cual es única                                                                |
| `uploader`           | Una cadena con el nombre de usuario del cargador del video                                                  |
| `age`                | Un número entero que representa los días transcurridos desde la fecha en que se subió el video hasta el 15 de febrero de 2007 (fecha de creación de YouTube) |
| `category`           | Una cadena que indica la categoría del video elegida por el cargador                                       |
| `length`             | Un número entero que representa la duración del video en minutos                                            |
| `views`              | Un número entero que representa el número de visualizaciones del video                                      |
| `rate`               | Un número flotante que indica la calificación del video                                                      |
| `ratings`            | Un número entero que representa el número de calificaciones recibidas por el video                          |
| `comments`           | Un número entero que indica el número de comentarios en el video                                            |
| `related IDs`        | Hasta 20 cadenas de texto con los IDs de videos relacionados                                                |
"""

#iniciamos descargando la data del enlace, en esta ocación no se encontro el archivo 0333 y
# por ese motivo se deciduo a usar el archivo 0303 del cual usamos la base de datos llamada ¨1¨,
#adjuntaremos el archivo en github para mejor visualización

import pandas as pd
df = pd.read_csv('1.txt', sep='\t', header=None)
#partimos de que debemos darle encabezado a las columnas para poder identificar los datos que usaremos
column_names = ['VideoID', 'uploader', 'age', 'category', 'length', 'views', 'rate', 'ratings', 'comments'] + [f'related_ID_{i}' for i in range(1, 21)]
df.columns = column_names
display(df.columns)
display(df.head())

#mantendremos las columnas a usar que son requisitos del problema
columns_to_keep = ['VideoID', 'age', 'category', 'views', 'rate']
df = df[columns_to_keep]
display(df.columns)
display(df.head())

#empezamos a filtrar datos
df = df[df['category'] == 'Music']
display(df[['VideoID', 'category']].head())

# Mostrar 'VideoID' y 'age' después de filtrar por 'Music'
display(df[['VideoID', 'age']].head())

# Mostrar 'VideoID' y 'views' después de filtrar por 'Music'
display(df[['VideoID', 'views']].head())

# Mostrar 'VideoID' y 'rate' después de filtrar por 'Music'
display(df[['VideoID', 'rate']].head())

# Exportar el DataFrame filtrado a un archivo JSON
# El archivo se guardará en el directorio actual del notebook.
df.to_json('filtered_youtube_music_data.json', orient='records', lines=True)

print("Datos filtrados exportados a 'filtered_youtube_music_data.json'")